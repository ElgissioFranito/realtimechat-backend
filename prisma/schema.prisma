generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  categ_id        BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  categ_nom       String?           @db.VarChar(255)
  categ_descr     String?           @db.VarChar(255)
  categ_photo     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  sous_categories sous_categories[]
}

model discussions {
  discussion_id   BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  discussion_name String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  discussion_user discussion_user[]
  messages        messages[]
}

model entreprises {
  entrps_id                BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  sous_categ_id            BigInt?          @db.UnsignedBigInt
  vils_id                  BigInt?          @db.UnsignedBigInt
  entrps_nom               String?          @db.VarChar(200)
  entrps_slogan            String?          @db.Text
  entrps_description       String?          @db.Text
  entrps_logo              String?          @db.Text
  entrps_offrepromo        String?          @db.Text
  entrps_adresse           String?          @db.Text
  entrps_siteweb           String?          @db.Text
  entrps_urlsiteweb        String?          @db.Text
  entrps_creation          String?          @db.VarChar(200)
  entrps_capital           String?          @db.VarChar(200)
  entrps_effectif          Int?
  entrps_forme             String?          @db.Text
  entrps_telephones        String?          @db.Text
  entrps_nif               String?          @db.VarChar(200)
  entrps_stat              String?          @db.VarChar(200)
  entrps_email             String?          @db.VarChar(200)
  entrps_facebook          String?          @db.VarChar(200)
  entrps_urlfacebook       String?          @db.Text
  entrps_marques           String?          @db.Text
  entrps_nomdir_1          String?          @db.VarChar(200)
  entrps_telephonedir_1    String?          @db.VarChar(200)
  entrps_fax               String?          @db.VarChar(200)
  entrps_adresseagence_1   String?          @db.Text
  entrps_telephoneagence_1 String?          @db.VarChar(200)
  entrps_fonctiondir_1     String?          @db.VarChar(200)
  entrps_emaildir_1        String?          @db.VarChar(200)
  entrps_cif               String?          @db.VarChar(500)
  entrps_coord             String?          @db.VarChar(200)
  entrps_verif             Int?
  created_at               DateTime?        @db.Timestamp(0)
  updated_at               DateTime?        @db.Timestamp(0)
  sous_categories          sous_categories? @relation(fields: [sous_categ_id], references: [sous_categ_id], map: "entreprises_sous_categ_id_foreign")
  villes                   villes?          @relation(fields: [vils_id], references: [vils_id], map: "entreprises_vils_id_foreign")
  users                    users[]

  @@index([sous_categ_id], map: "entreprises_sous_categ_id_foreign")
  @@index([vils_id], map: "entreprises_vils_id_foreign")
}

model messages {
  message_id      BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  discussion_id   BigInt      @db.UnsignedBigInt
  user_id         BigInt      @db.UnsignedBigInt
  message_content String?     @db.VarChar(255)
  created_at      DateTime?   @db.Timestamp(0)
  updated_at      DateTime?   @db.Timestamp(0)
  discussions     discussions @relation(fields: [discussion_id], references: [discussion_id], onDelete: Cascade, map: "messages_discussion_id_foreign")
  users           users       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "messages_user_id_foreign")

  @@index([discussion_id], map: "messages_discussion_id_foreign")
  @@index([user_id], map: "messages_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model sessions {
  id            String  @id
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model sous_categories {
  sous_categ_id    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  categ_id         BigInt?       @db.UnsignedBigInt
  sous_categ_nom   String?       @db.VarChar(255)
  sous_categ_descr String?       @db.VarChar(255)
  sous_categ_photo String?       @db.VarChar(255)
  created_at       DateTime?     @db.Timestamp(0)
  updated_at       DateTime?     @db.Timestamp(0)
  entreprises      entreprises[]
  categories       categories?   @relation(fields: [categ_id], references: [categ_id], map: "sous_categories_categ_id_foreign")

  @@index([categ_id], map: "sous_categories_categ_id_foreign")
}

model users {
  id                BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  entrps_id         BigInt?           @db.UnsignedBigInt
  name              String
  firstname         String?
  description       String?
  email             String            @unique(map: "users_email_unique")
  email_verified_at DateTime?         @db.Timestamp(0)
  password          String
  role              String
  photo_path        String?
  remember_token    String?           @db.VarChar(100)
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  discussion_user   discussion_user[]
  messages          messages[]
  entreprises       entreprises?      @relation(fields: [entrps_id], references: [entrps_id], map: "users_entrps_id_foreign")

  @@index([entrps_id], map: "users_entrps_id_foreign")
}

model villes {
  vils_id         BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  vils_nom        String?       @db.VarChar(255)
  vils_codepostal String?
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  entreprises     entreprises[]
}

model discussion_user {
  discussion_id BigInt      @db.UnsignedBigInt
  user_id       BigInt      @db.UnsignedBigInt
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  discussions   discussions @relation(fields: [discussion_id], references: [discussion_id], onUpdate: Restrict, map: "discussion_user_discussion_id_foreign")
  users         users       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "discussion_user_user_id_foreign")

  @@id([discussion_id, user_id])
  @@index([user_id], map: "discussion_user_user_id_foreign")
}
